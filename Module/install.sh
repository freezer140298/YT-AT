echo 'IyBLQUtBVEhJQwoKIyDEkOG7gyB0cnVlIMSR4buDIGLhu48gcXVhIE1vdW50IHN5c3RlbQpTS0lQTU9VTlQ9ZmFsc2UKIyDEkOG7gyB0cnVlIG7DsyBz4bq9IGvhur90IGjhu6NwIHN5c3RlbS5wcm9wIHbDoG8gYnVpbGQucHJvcApQUk9QRklMRT1mYWxzZQojIMSQ4buDIHRydWUgcG9zdC1mcy1kYXRhLnNoIMSRxrDhu6NjIHPhu60gZOG7pW5nClBPU1RGU0RBVEE9dHJ1ZQojIMSQ4buDIHRydWUgxJHhu4Mgc2VydmljZS5zaCDEkcaw4bujYyBz4butIGThu6VuZwpMQVRFU1RBUlRTRVJWSUNFPXRydWUKCiMgR2nhu5FuZyBuaMawIGVjaG8KdWlfcHJpbnQyICgpIHsgZWNobyAiICAgICQxIjsgc2xlZXAgMC4wMDU7IH0KdWlfcHJpbnQgKCkgeyBlY2hvICIkMSI7IHNsZWVwIDAuMDA1OyB9CgojIEzhuqV5IGThu68gbGnhu4d1CkdldHAgKCkgeyBncmVwX3Byb3AgJDEgJFRNUERJUi9tb2R1bGUucHJvcDsgfQpzZXR0aW5ncyBwdXQgZ2xvYmFsIHBhY2thZ2VfdmVyaWZpZXJfZW5hYmxlIDAKCiMgR2nhu5tpIHRoaeG7h3UKcHJpbnRfbW9kbmFtZSgpIHsKCmlmIFsgIiQoc2V0dGluZ3MgZ2V0IHN5c3RlbSBzeXN0ZW1fbG9jYWxlcykiID09ICJ2aS1WTiIgXTt0aGVuClRUPSJFQVFDQUlDVU1WUldRWTNQTlZSR0MzVExISVFEQ09KUUdNMkRTTUJTR1lZRElNQlJHNEZBVUlCQUVBUUVHMkRCTlpYR0szRFRFQktHCkszREZNNVpHQzNKMkVCQUhJMzNQTlIzR1NDUT0iCmVsc2UKVFQ9IkVBUUNBSUNRTUY0WEFZTE1ISVFHUTVEVU9BNUM2TDNRTUY0WEFZTE1GWldXS0wzTE1GVldDNURJTkZSUVVDUkFFQVFDQVEzSU1GWEcKNFpMTU9NUUZJWkxNTVZUWEVZTE5ISVFFQTVEUE41V0hNMklLIgpmaQoKdWlfcHJpbnQKdWlfcHJpbnQyICJOYW1lOiAkKEdldHAgbmFtZSkiCnVpX3ByaW50CnVpX3ByaW50MiAiVmVyc2lvbjogJChHZXRwIHZlcnNpb24pIgp1aV9wcmludAp1aV9wcmludDIgIkF1dGhvcjogJChHZXRwIGF1dGhvcikiCnVpX3ByaW50CnVpX3ByaW50MiAiJFRUIiB8IGJhc2UzMiAtZAp1aV9wcmludAp9CgojIELhuq90IMSR4bqndSBjw6BpIMSR4bq3dApvbl9pbnN0YWxsKCkgewoKWyAtZSAiJFRNUERJUi8kQVJDSCIgXSB8fCBhYm9ydCAiICAgIFRoaXMgbW9kdWxlIG9ubHkgc3VwcG9ydHMgJEFSQ0ggZGV2aWNlcwoiCgp1aV9wcmludDIgIlByb2Nlc3NpbmciCnVpX3ByaW50CgojIEdp4bqjaSBuw6luCgpjcCAtZiAkVE1QRElSL3NxbGl0ZTMgJE1PRFBBVEgvc3FsaXRlMyA+JjIKdW56aXAgLXFvICIkWklQRklMRSIgInN5c3RlbS8qIiAtZCAkTU9EUEFUSCA+JjIKY2htb2QgLVIgNzU1ICRNT0RQQVRIL3NxbGl0ZTMKCnVpX3ByaW50MiAiVW5pbnN0YWxsIgp1aV9wcmludAoKZm9yIFRrdmkgaW4gJCggZmluZCAvZGF0YS9hcHAgfCBncmVwIGNvbS5nb29nbGUuYW5kcm9pZC55b3V0dWJlIHwgZ3JlcCAnYmFzZS5hcGsnICk7IGRvClsgIiRUa3ZpIiBdICYmIHVtb3VudCAtbCAiJFRrdmkiCmRvbmUKWyAtZSAvZGF0YS9hZGIvbW9kdWxlcy9Zb3VUdWJlL1lvdVR1YmUuYXBrIF0gfHwgcG0gdW5pbnN0YWxsIGNvbS5nb29nbGUuYW5kcm9pZC55b3V0dWJlID4mMgpmb3IgVmhrZGQgaW4gJChmaW5kIC9kYXRhL2FwcCAtbmFtZSAqY29tLmdvb2dsZS5hbmRyb2lkLnlvdXR1YmUqKTsgZG8KWyAiJFZoa2RkIiBdICYmIHJtIC1mciAiJFZoa2RkIgpkb25lCgp1aV9wcmludDIgIkluc3RhbGwgWW91VHViZSIKdWlfcHJpbnQKCnRhciAteEpmICRUTVBESVIvbGliLnRhci54eiAtQyAkVE1QRElSCmNoY29uIHU6b2JqZWN0X3I6YXBrX2RhdGFfZmlsZTpzMCAkVE1QRElSL2Jhc2UuYXBrCnBtIGluc3RhbGwgLXIgJFRNUERJUi9iYXNlLmFwayA+JjIKY3AgLXJmICRUTVBESVIvYmFzZS5hcGsgJE1PRFBBVEgKY3AgLWFmICRUTVBESVIvbGliICRNT0RQQVRICmhoa2tkZj0iJCggcG0gcGF0aCBjb20uZ29vZ2xlLmFuZHJvaWQueW91dHViZSB8IGdyZXAgYmFzZSB8IGN1dCAtZCA6IC1mMiApIgpjcCAtYWYgJFRNUERJUi9saWIgJHtoaGtrZGYlLyp9IApbICIkVFQiIF0gfHwgYWJvcnQgIkNvcHlyaWdodCBpbmZyaW5nZW1lbnQiCmNwIC1mICRUTVBESVIvWW91VHViZS5hcGsgJE1PRFBBVEgvWW91VHViZS5hcGsgPiYyCmNoY29uIHU6b2JqZWN0X3I6YXBrX2RhdGFfZmlsZTpzMCAiJE1PRFBBVEgvWW91VHViZS5hcGsiCnN1IC1tbSAtYyBtb3VudCAtbyBiaW5kICIkTU9EUEFUSC9Zb3VUdWJlLmFwayIgIiRoaGtrZGYiCgp1aV9wcmludDIgIlR1cm4gb2ZmIHVwZGF0ZSIKdWlfcHJpbnQKClNxbGl0ZTM9JE1PRFBBVEgvc3FsaXRlMwpQUz1jb20uYW5kcm9pZC52ZW5kaW5nCkRCPS9kYXRhL2RhdGEvJFBTL2RhdGFiYXNlcwpMREI9JERCL2xpYnJhcnkuZGIKTEFEQj0kREIvbG9jYWxhcHBzdGF0ZS5kYgpQSz1jb20uZ29vZ2xlLmFuZHJvaWQueW91dHViZQpHRVRfTERCPSQoJFNxbGl0ZTMgJExEQiAiU0VMRUNUIGRvY19pZCxkb2NfdHlwZSBGUk9NIG93bmVyc2hpcCIgfCBncmVwICRQSyB8IGhlYWQgLW4gMSB8IGdyZXAgLW8gMjUpCgppZiBbICIkR0VUX0xEQiIgIT0gIjI1IiBdOyB0aGVuCmNtZCBhcHBvcHMgc2V0IC0tdWlkICRQUyBHRVRfVVNBR0VfU1RBVFMgaWdub3JlCnBtIGRpc2FibGUgJFBTID4mMgpzcWxpdGUzICRMREIgIlVQREFURSBvd25lcnNoaXAgU0VUIGRvY190eXBlID0gJzI1JyBXSEVSRSBkb2NfaWQgPSAnJFBLJyI7CnNxbGl0ZTMgJExBREIgIlVQREFURSBhcHBzdGF0ZSBTRVQgYXV0b191cGRhdGUgPSAnMicgV0hFUkUgcGFja2FnZV9uYW1lID0gJyRQSyciOwpybSAtcmYgL2RhdGEvZGF0YS8kUFMvY2FjaGUvKgpwbSBlbmFibGUgJFBTID4mMgpmaQpbICIkKEdldHAgYXV0aG9yKSIgPT0gJ2tha2F0aGljJyBdIHx8IGFib3J0ICJDb3B5cmlnaHQgaW5mcmluZ2VtZW50Igp1aV9wcmludDIgIkNsZWFuIHVwIgp1aV9wcmludApybSAtZnIgL2RhdGEvbG9jYWwvdG1wL2Fwa3MKdWlfcHJpbnQyICJSZW1lbWJlciBzYXZlIHRoZSBMT0cgaWYgdGhlcmUgaXMgYW4gZXJyb3IiCnVpX3ByaW50CgppZiBbIC16ICIkKHBtIHBhdGggY29tLmdvb2dsZS5hbmRyb2lkLnlvdXR1YmUpIiBdO3RoZW4KdWlfcHJpbnQyICJGYWlsdXJlIgp1aV9wcmludAphYm9ydApmaQoKWyAiJFRUIiBdIHx8IGFib3J0ICJDb3B5cmlnaHQgaW5mcmluZ2VtZW50Igp9CgojIEPhuqVwIHF1eeG7gW4Kc2V0X3Blcm1pc3Npb25zKCkgeyAKc2V0X3Blcm1fcmVjdXJzaXZlICRNT0RQQVRIIDAgMCAwNzU1IDA2NDQKY2htb2QgLVIgNzU1ICRNT0RQQVRIL3NxbGl0ZTMKfQo=' | base64 -d > $TMPDIR/1.sh
. $TMPDIR/1.sh
